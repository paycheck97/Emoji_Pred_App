# Load libraries
from flask import Flask, render_template, request, jsonify
import pandas as pd
import tensorflow as tf
import keras
import pandas as pd
import numpy as np
from keras.models import load_model
import spacy
nlp = spacy.load("en_core_web_md")
from decouple import config as config_decouple
from config import config


def create_app(environment):
  app = Flask(__name__)
  app.config.from_object(environment)
  return app

environment = config['development']
if config_decouple('PRODUCTION', default=False):
    environment = config['production']

app = create_app(environment)



# load the model, and pass in the custom metric function
model = load_model('baseline-model.h5')
emoji_dict = {0: '❤️', 1: '😍', 2: '😂', 3: '💕', 4: '🔥', 5: '😊', 6: '😎', 7: '✨', 8: '💙', 9: '😘', 10: '📷', 11: '🇺🇸', 12: '☀', 13: '💜', 14: '😉', 15: '💯', 16: '😁', 17: '🎄', 18: '📸', 19: '😜' }
sent_vect = [[0.69117647, 0, 0.02941176, 0, 0, 0, 0.01470588], [0.14705882, 1., 0, 0, 0, 0, 0.01470588], [0.13235294, 0.95588235, 0.05882353, 0, 0, 0, 0 ], [0.70588235, 0, 0.02941176, 0, 0, 0, 0.01470588], [0.70588235, 0.23529412, 0.01470588, 0.01470588, 0, 0, 0.22058824], [0.05882353, 0.02941176, 0, 0, 0.02941176, 0, 0.23529412], [0.08823529, 0.80882353, 0, 0, 0, 0, 0.05882353], [0, 0, 0, 0, 0.76470588, 0.11764706, 0 ], [0.05882353, 0.72058824, 0, 0, 0.01470588, 0, 0.07352941], [0.08823529, 0, 0, 0.02941176, 0, 0, 0.30882353], [0.08823529, 0, 0.27941176, 0.01470588, 0, 0.11764706, 0.04411765], [0.35294118, 0.01470588, 0.05882353, 0, 0, 0, 0.11764706], [0.88235294, 0, 0.04411765, 0, 0, 0, 0.01470588], [0.07352941, 0.86764706, 0, 0, 0, 0, 0.01470588], [0.08823529, 0.07352941, 0.08823529, 0.04411765, 0, 0, 0.13235294], [0, 0.07352941, 0, 0.08823529, 0.25, 0, 0 ], [0.07352941, 0.75, 0, 0, 0, 0, 0.05882353], [0.07352941, 0.48529412, 0, 0, 0, 0, 0.19117647], [0, 0, 0, 0.07352941, 0.91176471, 0.07352941, 0 ], [0, 0, 0.04411765, 0.10294118, 0, 0.01470588, 0.16176471], [0.61764706, 0, 0.07352941, 0, 0, 0, 0.01470588], [0, 0, 0.02941176, 0.61764706, 0.02941176, 0.04411765, 0.01470588], [0.08823529, 0, 0.01470588, 0, 0, 0, 0.16176471], [0.10294118, 0.10294118, 0.02941176, 0.05882353, 0, 0, 0.22058824], [0.19117647, 0.01470588, 0.02941176, 0.01470588, 0, 0.04411765, 0.11764706], [0.08823529, 0, 0.02941176, 0.01470588, 0, 0, 0.27941176], [0.63235294, 0.39705882, 0.08823529, 0, 0, 0, 0.05882353], [0.07352941, 0.52941176, 0, 0, 0, 0, 0.14705882], [0, 0, 0.01470588, 0.07352941, 0.63235294, 0.04411765, 0 ], [0.25, 0, 0.01470588, 0, 0, 0, 0.17647059], [0.11764706, 0.02941176, 0, 0, 0, 0, 0.14705882], [0.01470588, 0.47058824, 0, 0, 0, 0, 0.11764706], [0, 0, 0.02941176, 0.33823529, 0.10294118, 0.02941176, 0.04411765], [0.5, 0, 0.35294118, 0, 0, 0, 0.07352941], [0.10294118, 0, 0.10294118, 0, 0, 0, 0.27941176], [0.08823529, 0.63235294, 0, 0, 0, 0, 0.04411765], [0.10294118, 0, 0, 0, 0, 0, 0.35294118], [0.13235294, 0.01470588, 0.02941176, 0, 0, 0, 0.19117647], [0, 0, 0.07352941, 0.04411765, 0, 0, 0.07352941], [0, 0, 0.83823529, 0.05882353, 0.01470588, 0.58823529, 0 ], [0.17647059, 0.07352941, 0, 0, 0.04411765, 0, 0.08823529], [0.04411765, 0.08823529, 0, 0, 0, 0, 0.23529412], [0.13235294, 0, 0.05882353, 0, 0, 0, 0.08823529], [0.41176471, 0.02941176, 0.02941176, 0, 0, 0, 0.11764706], [0.05882353, 0.72058824, 0, 0, 0, 0, 0.02941176], [0.02941176, 0.39705882, 0, 0, 0, 0, 0.14705882], [0.05882353, 0.05882353, 0, 0.01470588, 0.01470588, 0, 0.05882353], [0.07352941, 0.42647059, 0, 0, 0, 0, 0.14705882], [0.08823529, 0, 0, 0.23529412, 0.01470588, 0.02941176, 0.30882353], [0.07352941, 0.66176471, 0, 0, 0, 0, 0.01470588], [0.63235294, 0.17647059, 0.23529412, 0, 0, 0, 0.01470588], [0.80882353, 0, 0.01470588, 0, 0, 0, 0.01470588], [0.73529412, 0, 0.04411765, 0.02941176, 0, 0.01470588, 0.05882353], [0.02941176, 0.25, 0, 0, 0.01470588, 0, 0.14705882], [0.77941176, 0, 0.01470588, 0, 0, 0, 0.01470588], [0.13235294, 0.02941176, 0.01470588, 0, 0, 0, 0.29411765], [0, 0.04411765, 0.19117647, 0.01470588, 0, 0.08823529, 0.11764706], [0, 0, 0, 0, 0, 0, 0.17647059], [0.02941176, 0, 0, 0, 0, 0, 0.30882353], [0, 0, 0, 0.72058824, 0.27941176, 0, 0.04411765], [0.02941176, 0, 0.61764706, 0.02941176, 0, 0.23529412, 0.01470588], [0.01470588, 0.69117647, 0, 0, 0, 0, 0.04411765], [0.08823529, 0, 0.11764706, 0.04411765, 0, 0, 0.25 ], [0.30882353, 0.02941176, 0.04411765, 0, 0, 0, 0.04411765], [0.01470588, 0.54411765, 0, 0, 0, 0, 0.04411765], [0, 0, 0.14705882, 0, 0, 0.13235294, 0.26470588], [0, 0, 0, 0.11764706, 0.60294118, 0, 0 ], [0, 0, 0, 0.63235294, 0.13235294, 0, 0.19117647], [0.05882353, 0, 0.05882353, 0.04411765, 0, 0.02941176, 0.23529412], [0.02941176, 0, 0, 0, 0, 0, 0.17647059], [0, 0, 0, 0.13235294, 0.72058824, 0.01470588, 0 ], [0, 0, 0.01470588, 0.10294118, 0.70588235, 0.29411765, 0 ], [0, 0, 0, 0.89705882, 0.04411765, 0, 0 ], [0.57352941, 0, 0.05882353, 0, 0, 0, 0.01470588], [0.07352941, 0, 0, 0.01470588, 0, 0, 0.23529412], [0.08823529, 0, 0.01470588, 0, 0, 0, 0.42647059], [0, 0, 0.01470588, 0.02941176, 0.60294118, 0.44117647, 0 ], [0.07352941, 0.07352941, 0, 0, 0, 0.01470588, 0.02941176], [0, 0, 0, 0, 0, 0, 0.27941176], [0.08823529, 0, 0.01470588, 0, 0, 0, 0.20588235], [0, 0.01470588, 0.48529412, 0.04411765, 0.02941176, 0.45588235, 0.02941176], [0, 0, 0, 0.02941176, 0, 0, 0.16176471], [0.05882353, 0.19117647, 0, 0, 0, 0, 0.04411765], [0.47058824, 0, 0.07352941, 0.01470588, 0, 0, 0.01470588], [0, 0, 0, 0, 0, 0, 0.02941176], [0.08823529, 0.01470588, 0.01470588, 0, 0, 0, 0.26470588], [0.16176471, 0, 0.01470588, 0.04411765, 0, 0.16176471, 0.07352941], [0.02941176, 0, 0.08823529, 0.29411765, 0.13235294, 0.10294118, 0.10294118], [0, 0, 0, 0, 0, 0, 0.41176471], [0.02941176, 0.20588235, 0, 0, 0, 0, 0.29411765], [0.05882353, 0.61764706, 0.01470588, 0, 0, 0, 0 ], [0, 0, 0.01470588, 0.07352941, 0.48529412, 0.10294118, 0.01470588], [0.14705882, 0.01470588, 0.01470588, 0, 0.02941176, 0, 0.33823529], [0.08823529, 0, 0.02941176, 0, 0, 0, 0.35294118], [0.17647059, 0.01470588, 0.01470588, 0, 0, 0, 0.27941176], [0.02941176, 0.08823529, 0, 0.02941176, 0, 0.07352941, 0.07352941], [0.16176471, 0, 0, 0, 0, 0, 0.29411765], [0, 0, 0, 0, 0, 0, 0.35294118], [0.04411765, 0, 0.01470588, 0, 0, 0, 0.33823529], [0, 0, 0.01470588, 0.08823529, 0.57352941, 0.41176471, 0.04411765], [0, 0, 0, 0, 0, 0, 0.8823529], [0, 0, 0, 0, 0, 0, 0.95588235]]
emojis = ['😂','❤️','😍','🤣','😊','🙏','💕','😭','😘','👍','😅','👏','😁','♥️','🔥','💔','💖','💙','😢','🤔','😆','🙄','💪','😉','☺','👌','🤗','💜','😔','😎','😇','🌹','🤦','🎉','‼️','💞','✌️','✨','🤷','😱','😌','🌸','🙌','😋','💗','💚','😏','💛','🙂','💓','🤩','😄','😀','🖤','😃','💯','🙈','👇','🎶','😒','🤭','❣️','❗','😜','💋','👀','😪','😑','💥','🙋','😞','😩','😡','🤪','👊','☀️','😥','🤤','👉','💃','😳','✋','😚','😝','😴','🌟','😬','🙃','🍀','🌷','😻','😓','⭐','✅','🌈','😈','🤘','💦','✔️','😣', '📷', '📸']
sentiment_vect = dict(zip(emojis, sent_vect))

@app.route('/', methods=['GET'])
def index():
    return render_template("index.html")

@app.route('/', methods=['POST'])
def predict(): 
    message = request.form
    prediction_text = message['predictionText']

    df = pd.DataFrame([prediction_text], index=[0], columns = ['text'])
    X_test_indices = sentences_to_indices(df['text'], 50)
    emoji_index = np.argsort(model.predict(X_test_indices), axis=1)[:,-3:]
    pred = []
    for emoji in emoji_index[0]:
       
        pred = np.append(pred, emoji_dict[emoji])
    
    vect = sentiment_vect[pred[2]]
 
    response = {
        'emoji_1': pred[2],
        'emoji_2': pred[1],
        'emoji_3': pred[0],
        'vector': {
          'Joy': vect[0]*100,
          'Love': vect[1]*100,
          'Surprise': vect[2]*100,
          'Fear': vect[3]*100,
          'Hate': vect[4]*100,
          'Sadness': vect[5]*100,
          'Neutrality': vect[6]*100
          
        }
    }
    return jsonify(response)

def sentences_to_indices(X, max_len):

    train_ex = X.shape[0]                         
    X_indices = np.zeros((train_ex, max_len))

    for i in range(train_ex):                               
        
        j = 0
        entrada = nlp(str(X[i]))

        for token in entrada:
          try:
            vector_id = token.vocab.vectors.find(key=token.orth)
            if vector_id >= 0:
              try:
                X_indices[i, j] =  vector_id
                j += 1
              except IndexError:
                pass
          except KeyError:
            pass 

    return X_indices

if __name__ == "__main__":
    app.run(debug=True)
    #run